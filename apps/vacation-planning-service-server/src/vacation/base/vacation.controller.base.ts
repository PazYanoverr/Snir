/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VacationService } from "../vacation.service";
import { VacationCreateInput } from "./VacationCreateInput";
import { Vacation } from "./Vacation";
import { VacationFindManyArgs } from "./VacationFindManyArgs";
import { VacationWhereUniqueInput } from "./VacationWhereUniqueInput";
import { VacationUpdateInput } from "./VacationUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { DestinationFindManyArgs } from "../../destination/base/DestinationFindManyArgs";
import { Destination } from "../../destination/base/Destination";
import { DestinationWhereUniqueInput } from "../../destination/base/DestinationWhereUniqueInput";

export class VacationControllerBase {
  constructor(protected readonly service: VacationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vacation })
  async createVacation(
    @common.Body() data: VacationCreateInput
  ): Promise<Vacation> {
    return await this.service.createVacation({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vacation] })
  @ApiNestedQuery(VacationFindManyArgs)
  async vacations(@common.Req() request: Request): Promise<Vacation[]> {
    const args = plainToClass(VacationFindManyArgs, request.query);
    return this.service.vacations({
      ...args,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vacation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vacation(
    @common.Param() params: VacationWhereUniqueInput
  ): Promise<Vacation | null> {
    const result = await this.service.vacation({
      where: params,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        name: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vacation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVacation(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() data: VacationUpdateInput
  ): Promise<Vacation | null> {
    try {
      return await this.service.updateVacation({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vacation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVacation(
    @common.Param() params: VacationWhereUniqueInput
  ): Promise<Vacation | null> {
    try {
      return await this.service.deleteVacation({
        where: params,
        select: {
          createdAt: true,
          endDate: true,
          id: true,
          name: true,
          startDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: VacationWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,

        destination: {
          select: {
            id: true,
          },
        },

        id: true,
        status: true,
        updatedAt: true,

        vacation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateVacation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateVacation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateVacation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/destinations")
  @ApiNestedQuery(DestinationFindManyArgs)
  async findDestinations(
    @common.Req() request: Request,
    @common.Param() params: VacationWhereUniqueInput
  ): Promise<Destination[]> {
    const query = plainToClass(DestinationFindManyArgs, request.query);
    const results = await this.service.findDestinations(params.id, {
      ...query,
      select: {
        country: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,

        vacation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/destinations")
  async connectDestinations(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() body: DestinationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      destinations: {
        connect: body,
      },
    };
    await this.service.updateVacation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/destinations")
  async updateDestinations(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() body: DestinationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      destinations: {
        set: body,
      },
    };
    await this.service.updateVacation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/destinations")
  async disconnectDestinations(
    @common.Param() params: VacationWhereUniqueInput,
    @common.Body() body: DestinationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      destinations: {
        disconnect: body,
      },
    };
    await this.service.updateVacation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
