/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Vacation as PrismaVacation,
  Booking as PrismaBooking,
  Destination as PrismaDestination,
  User as PrismaUser,
} from "@prisma/client";

export class VacationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.VacationCountArgs, "select">): Promise<number> {
    return this.prisma.vacation.count(args);
  }

  async vacations(
    args: Prisma.VacationFindManyArgs
  ): Promise<PrismaVacation[]> {
    return this.prisma.vacation.findMany(args);
  }
  async vacation(
    args: Prisma.VacationFindUniqueArgs
  ): Promise<PrismaVacation | null> {
    return this.prisma.vacation.findUnique(args);
  }
  async createVacation(
    args: Prisma.VacationCreateArgs
  ): Promise<PrismaVacation> {
    return this.prisma.vacation.create(args);
  }
  async updateVacation(
    args: Prisma.VacationUpdateArgs
  ): Promise<PrismaVacation> {
    return this.prisma.vacation.update(args);
  }
  async deleteVacation(
    args: Prisma.VacationDeleteArgs
  ): Promise<PrismaVacation> {
    return this.prisma.vacation.delete(args);
  }

  async findBookings(
    parentId: string,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.vacation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findDestinations(
    parentId: string,
    args: Prisma.DestinationFindManyArgs
  ): Promise<PrismaDestination[]> {
    return this.prisma.vacation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .destinations(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.vacation
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
