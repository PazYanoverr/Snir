/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Vacation } from "./Vacation";
import { VacationCountArgs } from "./VacationCountArgs";
import { VacationFindManyArgs } from "./VacationFindManyArgs";
import { VacationFindUniqueArgs } from "./VacationFindUniqueArgs";
import { CreateVacationArgs } from "./CreateVacationArgs";
import { UpdateVacationArgs } from "./UpdateVacationArgs";
import { DeleteVacationArgs } from "./DeleteVacationArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { DestinationFindManyArgs } from "../../destination/base/DestinationFindManyArgs";
import { Destination } from "../../destination/base/Destination";
import { User } from "../../user/base/User";
import { VacationService } from "../vacation.service";
@graphql.Resolver(() => Vacation)
export class VacationResolverBase {
  constructor(protected readonly service: VacationService) {}

  async _vacationsMeta(
    @graphql.Args() args: VacationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Vacation])
  async vacations(
    @graphql.Args() args: VacationFindManyArgs
  ): Promise<Vacation[]> {
    return this.service.vacations(args);
  }

  @graphql.Query(() => Vacation, { nullable: true })
  async vacation(
    @graphql.Args() args: VacationFindUniqueArgs
  ): Promise<Vacation | null> {
    const result = await this.service.vacation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Vacation)
  async createVacation(
    @graphql.Args() args: CreateVacationArgs
  ): Promise<Vacation> {
    return await this.service.createVacation({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Vacation)
  async updateVacation(
    @graphql.Args() args: UpdateVacationArgs
  ): Promise<Vacation | null> {
    try {
      return await this.service.updateVacation({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Vacation)
  async deleteVacation(
    @graphql.Args() args: DeleteVacationArgs
  ): Promise<Vacation | null> {
    try {
      return await this.service.deleteVacation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Vacation,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Destination], { name: "destinations" })
  async findDestinations(
    @graphql.Parent() parent: Vacation,
    @graphql.Args() args: DestinationFindManyArgs
  ): Promise<Destination[]> {
    const results = await this.service.findDestinations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Vacation): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
